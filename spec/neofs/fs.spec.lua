local plpath = require("pl.path")
local conf = require("neofs.conf")
local const = require("neofs.const")
local fs = require("neofs.fs")
local utils = require("spec.neofs.utils")

describe("neofs.fs", function()
  before_each(function()
    utils.mkfs(NEWCWD)
    vim.cmd("cd " .. NEWCWD)
  end)

  after_each(function()
    vim.cmd("cd " .. OLDCWD)
    utils.rmfs(NEWCWD)
  end)

  local conf = require("neofs.conf")

  describe("scandir", function()
    local filter = function(name)
      return false
    end

    local read = function(entry)
      return { name = entry.name, type = entry.type, level = entry.level }
    end

    it("reads directory tree without expand", function()
      local data = getfixture("neofs.fs.scandir.noexpand")
      local entries = fs.scandir(const.ROOT_LEVEL, NEWCWD, data.expanded, filter)
      table.sort(entries, conf.tree.order)
      local actual = vim.tbl_map(read, entries)
      assert.are.same(data.expected, actual)
    end)

    it("reads directory tree with expand", function()
      local data = getfixture("neofs.fs.scandir.noexpand")
      local entries = fs.scandir(const.ROOT_LEVEL, NEWCWD, data.expanded, filter)
      table.sort(entries, conf.tree.order)
      local actual = vim.tbl_map(read, entries)
      assert.are.same(data.expected, actual)
    end)
  end)

  describe("mkdir", function()
    it("creates new directory if parent exists", function()
      local path = fs.join(NEWCWD, "dir_2/dir_2_3")
      fs.mkdir(path)
      assert.is.truthy(plpath.exists(path))
    end)

    it("fails if parent directory does not exists", function()
      local path = fs.join(NEWCWD, "dir_X/dir_2_3")
      assert.has.errors(function()
        fs.mkdir(path)
      end)
      assert.is.falsy(plpath.exists(path))
    end)
  end)

  describe("trash", function()
    local trashcmd = "trash"

    it("executes trashcmd if path exists", function()
      local path = fs.join(NEWCWD, "dir_2")
      fs.trash(trashcmd, path)
      assert.is.falsy(plpath.exists(path))
    end)

    it("fails if trash cmd not in path", function()
      assert.has.errors(function()
        fs.trash("xxx", fs.join(NEWCWD, "dir_X"))
      end)
    end)

    it("fails if path does not exist", function()
      assert.has.errors(function()
        fs.trash(trashcmd, fs.join(NEWCWD, "dir_X"))
      end)
    end)
  end)

  describe("create", function()
    it("creates file if parent directory exists", function()
      local path = fs.join(NEWCWD, "dir_2/test.txt")
      fs.create(path)
      assert.is.truthy(plpath.exists(path))
    end)

    it("faild if parent directory does not exist", function()
      local path = fs.join(NEWCWD, "dir_X/test.txt")
      assert.has.errors(function()
        fs.create(path)
      end)
      assert.is.falsy(plpath.exists(path))
    end)
  end)

  describe("rename #neofs.fs.rename", function()
    it("renames if file exists", function()
      local src = fs.join(NEWCWD, "dir_4/file_1")
      local dst = fs.join(NEWCWD, "dir_3/file_1")
      fs.rename(src, dst)
      assert.is.falsy(plpath.exists(src))
      assert.is.truthy(plpath.exists(dst))
    end)

    it("fails if source does not exist", function()
      local src = fs.join(NEWCWD, "dir_X/file_1")
      local dst = fs.join(NEWCWD, "dir_3/file_1")
      assert.has.errors(function()
        fs.read(src, dst)
      end)
      assert.is.falsy(plpath.exists(src))
      assert.is.falsy(plpath.exists(dst))
    end)

    it("fails if targer does not exist", function()
      local src = fs.join(NEWCWD, "dir_4/file_1")
      local dst = fs.join(NEWCWD, "dir_X/file_1")
      assert.has.errors(function()
        fs.read(src, dst)
      end)
      assert.is.truthy(plpath.exists(src))
      assert.is.falsy(plpath.exists(dst))
    end)
  end)
end)
